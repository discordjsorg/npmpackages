## Examples

All data in quick.db is stored persistently in a database. Here is an example of setting an object in the database, then fetching parts & the full object.

const db = require('quick.db');
 
// Setting an object in the database:
db.set('userInfo', { difficulty: 'Easy' })
// -> { difficulty: 'Easy' }
 
// Pushing an element to an array (that doesn't exist yet) in an object:
db.push('userInfo.items', 'Sword')
// -> { difficulty: 'Easy', items: ['Sword'] }
 
// Adding to a number (that doesn't exist yet) in an object:
db.add('userInfo.balance', 500)
// -> { difficulty: 'Easy', items: ['Sword'], balance: 500 }
 
// Repeating previous examples:
db.push('userInfo.items', 'Watch')
// -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 500 }
db.add('userInfo.balance', 500)
// -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 1000 }
 
// Fetching individual properties
db.get('userInfo.balance') // -> 1000
db.get('userInfo.items') // ['Sword', 'Watch']

---------------------------------------------------------------------------------------------------------------

## Installation

If you're having troubles installing, please follow this troubleshooting guide.

Linux & Windows

npm i quick.db
Note: Windows users may need to do additional steps listed here.

Mac

Install: XCode
Run: npm i -g node-gyp in terminal
Run: node-gyp --python /path/to/python2.7 (skip this step if you didn't install python 3.x)
Run: npm i quick.db

## What is quick.db?

Quick.db is an easy to use database wrapper for better-sqlite3, it was designed to be simple to let new users who are just getting into development and don't want to worry about learning SQL just quite yet.

